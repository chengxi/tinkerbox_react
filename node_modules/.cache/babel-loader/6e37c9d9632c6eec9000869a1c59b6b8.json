{"ast":null,"code":"/* globals chrome, navigator */\n'use strict';\n\nfunction _toArray(arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n}\n\nvar _require = require('@twilio/webrtc/lib/util'),\n    guessBrowser = _require.guessBrowser,\n    isWebRTCSupported = _require.support;\n\nvar SUPPORTED_CHROME_BASED_BROWSERS = ['edg', 'edge', 'electron', 'headlesschrome'];\n/**\n * Check whether the current browser is non-Chromium Edge.\n * @param {string} browser\n * @returns {boolean}\n */\n\nfunction isNonChromiumEdge(browser) {\n  return browser === 'chrome' && /Edge/.test(navigator.userAgent) && (typeof chrome === 'undefined' || typeof chrome.runtime === 'undefined');\n}\n/**\n * Get the name of the rebranded Chromium browser, if any. Re-branded Chrome's user\n * agent has the following format:\n * <source>/<version> (<os>) <engine>/<version> (<engine_name>) Chrome/<version> [Mobile] Safari/<version>\n * @param browser\n * @returns {?string} Name of the rebranded Chrome browser, or null if the browser\n *   is either not Chrome or vanilla Chrome.\n */\n\n\nfunction rebrandedChromeBrowser(browser) {\n  // If the browser is not Chrome based, then it is not a rebranded Chrome browser.\n  if (browser !== 'chrome') {\n    return null;\n  } // Latest desktop Brave browser has a \"brave\" property in navigator.\n\n\n  if ('brave' in navigator) {\n    return 'brave';\n  } // Remove the \"(.+)\" entries from the user agent thereby retaining only the\n  // <name>[/<version>] entries.\n\n\n  var nameAndVersions = navigator.userAgent.replace(/\\([^)]+\\)(\\s)?/g, ''); // Extract the potential browser <name>s by ignoring the first two names, which\n  // point to <source> and <engine>.\n\n  var matches = nameAndVersions.match(/[^\\s]+/g) || [];\n\n  var _matches$map = matches.map(function (nameAndVersion) {\n    return nameAndVersion.split('/')[0].toLowerCase();\n  }),\n      _matches$map2 = _toArray(_matches$map),\n      browserNames = _matches$map2.slice(2); // Extract the <name> that is not expected to be present in the vanilla Chrome\n  // browser, which indicates the rebranded name (ex: \"edg[e]\", \"electron\"). If null,\n  // then this is a vanilla Chrome browser.\n\n\n  return browserNames.find(function (name) {\n    return !['chrome', 'mobile', 'safari'].includes(name);\n  }) || null;\n}\n/**\n * Check if the current browser is officially supported by twilio-video.js.\n * @returns {boolean}\n */\n\n\nfunction isSupported() {\n  var browser = guessBrowser();\n  var rebrandedChrome = rebrandedChromeBrowser(browser);\n  return !!browser && isWebRTCSupported() && (!rebrandedChrome || SUPPORTED_CHROME_BASED_BROWSERS.includes(rebrandedChrome)) && !isNonChromiumEdge(browser);\n}\n\nmodule.exports = isSupported;","map":{"version":3,"sources":["/Users/xicheng/lab/git/fv_nav/node_modules/twilio-video/es5/util/support.js"],"names":["_toArray","arr","Array","isArray","from","_require","require","guessBrowser","isWebRTCSupported","support","SUPPORTED_CHROME_BASED_BROWSERS","isNonChromiumEdge","browser","test","navigator","userAgent","chrome","runtime","rebrandedChromeBrowser","nameAndVersions","replace","matches","match","_matches$map","map","nameAndVersion","split","toLowerCase","_matches$map2","browserNames","slice","find","name","includes","isSupported","rebrandedChrome","module","exports"],"mappings":"AAAA;AACA;;AAEA,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AAAE,SAAOC,KAAK,CAACC,OAAN,CAAcF,GAAd,IAAqBA,GAArB,GAA2BC,KAAK,CAACE,IAAN,CAAWH,GAAX,CAAlC;AAAoD;;AAE7E,IAAII,QAAQ,GAAGC,OAAO,CAAC,yBAAD,CAAtB;AAAA,IACIC,YAAY,GAAGF,QAAQ,CAACE,YAD5B;AAAA,IAEIC,iBAAiB,GAAGH,QAAQ,CAACI,OAFjC;;AAIA,IAAIC,+BAA+B,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,UAAhB,EAA4B,gBAA5B,CAAtC;AAEA;;;;;;AAKA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AAClC,SAAOA,OAAO,KAAK,QAAZ,IAAwB,OAAOC,IAAP,CAAYC,SAAS,CAACC,SAAtB,CAAxB,KAA6D,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,OAAd,KAA0B,WAAxH,CAAP;AACD;AAED;;;;;;;;;;AAQA,SAASC,sBAAT,CAAgCN,OAAhC,EAAyC;AACvC;AACA,MAAIA,OAAO,KAAK,QAAhB,EAA0B;AACxB,WAAO,IAAP;AACD,GAJsC,CAMvC;;;AACA,MAAI,WAAWE,SAAf,EAA0B;AACxB,WAAO,OAAP;AACD,GATsC,CAWvC;AACA;;;AACA,MAAIK,eAAe,GAAGL,SAAS,CAACC,SAAV,CAAoBK,OAApB,CAA4B,iBAA5B,EAA+C,EAA/C,CAAtB,CAbuC,CAevC;AACA;;AACA,MAAIC,OAAO,GAAGF,eAAe,CAACG,KAAhB,CAAsB,SAAtB,KAAoC,EAAlD;;AAEA,MAAIC,YAAY,GAAGF,OAAO,CAACG,GAAR,CAAY,UAAUC,cAAV,EAA0B;AACvD,WAAOA,cAAc,CAACC,KAAf,CAAqB,GAArB,EAA0B,CAA1B,EAA6BC,WAA7B,EAAP;AACD,GAFkB,CAAnB;AAAA,MAGIC,aAAa,GAAG5B,QAAQ,CAACuB,YAAD,CAH5B;AAAA,MAIIM,YAAY,GAAGD,aAAa,CAACE,KAAd,CAAoB,CAApB,CAJnB,CAnBuC,CAyBvC;AACA;AACA;;;AAGA,SAAOD,YAAY,CAACE,IAAb,CAAkB,UAAUC,IAAV,EAAgB;AACvC,WAAO,CAAC,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+BC,QAA/B,CAAwCD,IAAxC,CAAR;AACD,GAFM,KAED,IAFN;AAGD;AAED;;;;;;AAIA,SAASE,WAAT,GAAuB;AACrB,MAAItB,OAAO,GAAGL,YAAY,EAA1B;AACA,MAAI4B,eAAe,GAAGjB,sBAAsB,CAACN,OAAD,CAA5C;AACA,SAAO,CAAC,CAACA,OAAF,IAAaJ,iBAAiB,EAA9B,KAAqC,CAAC2B,eAAD,IAAoBzB,+BAA+B,CAACuB,QAAhC,CAAyCE,eAAzC,CAAzD,KAAuH,CAACxB,iBAAiB,CAACC,OAAD,CAAhJ;AACD;;AAEDwB,MAAM,CAACC,OAAP,GAAiBH,WAAjB","sourcesContent":["/* globals chrome, navigator */\n'use strict';\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nvar _require = require('@twilio/webrtc/lib/util'),\n    guessBrowser = _require.guessBrowser,\n    isWebRTCSupported = _require.support;\n\nvar SUPPORTED_CHROME_BASED_BROWSERS = ['edg', 'edge', 'electron', 'headlesschrome'];\n\n/**\n * Check whether the current browser is non-Chromium Edge.\n * @param {string} browser\n * @returns {boolean}\n */\nfunction isNonChromiumEdge(browser) {\n  return browser === 'chrome' && /Edge/.test(navigator.userAgent) && (typeof chrome === 'undefined' || typeof chrome.runtime === 'undefined');\n}\n\n/**\n * Get the name of the rebranded Chromium browser, if any. Re-branded Chrome's user\n * agent has the following format:\n * <source>/<version> (<os>) <engine>/<version> (<engine_name>) Chrome/<version> [Mobile] Safari/<version>\n * @param browser\n * @returns {?string} Name of the rebranded Chrome browser, or null if the browser\n *   is either not Chrome or vanilla Chrome.\n */\nfunction rebrandedChromeBrowser(browser) {\n  // If the browser is not Chrome based, then it is not a rebranded Chrome browser.\n  if (browser !== 'chrome') {\n    return null;\n  }\n\n  // Latest desktop Brave browser has a \"brave\" property in navigator.\n  if ('brave' in navigator) {\n    return 'brave';\n  }\n\n  // Remove the \"(.+)\" entries from the user agent thereby retaining only the\n  // <name>[/<version>] entries.\n  var nameAndVersions = navigator.userAgent.replace(/\\([^)]+\\)(\\s)?/g, '');\n\n  // Extract the potential browser <name>s by ignoring the first two names, which\n  // point to <source> and <engine>.\n  var matches = nameAndVersions.match(/[^\\s]+/g) || [];\n\n  var _matches$map = matches.map(function (nameAndVersion) {\n    return nameAndVersion.split('/')[0].toLowerCase();\n  }),\n      _matches$map2 = _toArray(_matches$map),\n      browserNames = _matches$map2.slice(2);\n\n  // Extract the <name> that is not expected to be present in the vanilla Chrome\n  // browser, which indicates the rebranded name (ex: \"edg[e]\", \"electron\"). If null,\n  // then this is a vanilla Chrome browser.\n\n\n  return browserNames.find(function (name) {\n    return !['chrome', 'mobile', 'safari'].includes(name);\n  }) || null;\n}\n\n/**\n * Check if the current browser is officially supported by twilio-video.js.\n * @returns {boolean}\n */\nfunction isSupported() {\n  var browser = guessBrowser();\n  var rebrandedChrome = rebrandedChromeBrowser(browser);\n  return !!browser && isWebRTCSupported() && (!rebrandedChrome || SUPPORTED_CHROME_BASED_BROWSERS.includes(rebrandedChrome)) && !isNonChromiumEdge(browser);\n}\n\nmodule.exports = isSupported;"]},"metadata":{},"sourceType":"script"}