{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _require = require('@twilio/webrtc/lib/util/sdp'),\n    getSdpFormat = _require.getSdpFormat;\n\nvar packageInfo = require('../../../package.json');\n\nvar InsightsPublisher = require('../../util/insightspublisher');\n\nvar NullInsightsPublisher = require('../../util/insightspublisher/null');\n\nvar StateMachine = require('../../statemachine');\n\nvar TwilioConnection = require('../../twilioconnection');\n\nvar DefaultBackoff = require('backoff');\n\nvar _require2 = require('../../util/constants'),\n    reconnectBackoffConfig = _require2.reconnectBackoffConfig;\n\nvar Timeout = require('../../util/timeout');\n\nvar _require3 = require('../../util'),\n    createBandwidthProfilePayload = _require3.createBandwidthProfilePayload,\n    createMediaSignalingPayload = _require3.createMediaSignalingPayload,\n    createSubscribePayload = _require3.createSubscribePayload,\n    getUserAgent = _require3.getUserAgent;\n\nvar _require4 = require('../../util/twilio-video-errors'),\n    createTwilioError = _require4.createTwilioError,\n    RoomCompletedError = _require4.RoomCompletedError,\n    SignalingConnectionError = _require4.SignalingConnectionError,\n    SignalingServerBusyError = _require4.SignalingServerBusyError;\n\nvar ICE_VERSION = 1;\nvar RSP_VERSION = 2;\nvar SDK_NAME = packageInfo.name + '.js';\nvar SDK_VERSION = packageInfo.version;\n/*\nTwilioConnectionTransport States\n----------------\n\n                      +-----------+\n                      |           |\n                      |  syncing  |---------+\n                      |           |         |\n                      +-----------+         |\n                         ^     |            |\n                         |     |            |\n                         |     v            v\n    +------------+    +-----------+    +--------------+\n    |            |    |           |    |              |\n    | connecting |--->| connected |--->| disconnected |\n    |            |    |           |    |              |\n    +------------+    +-----------+    +--------------+\n             |                              ^\n             |                              |\n             |                              |\n             +------------------------------+\n\n*/\n\nvar states = {\n  connecting: ['connected', 'disconnected'],\n  connected: ['disconnected', 'syncing'],\n  syncing: ['connected', 'disconnected'],\n  disconnected: []\n};\n/**\n * A {@link TwilioConnectionTransport} supports sending and receiving Room Signaling Protocol\n * (RSP) messages. It also supports RSP requests, such as Sync and Disconnect.\n * @extends StateMachine\n * @emits TwilioConnectionTransport#connected\n * @emits TwilioConnectionTransport#message\n */\n\nvar TwilioConnectionTransport = function (_StateMachine) {\n  _inherits(TwilioConnectionTransport, _StateMachine);\n  /**\n   * Construct a {@link TwilioConnectionTransport}.\n   * @param {?string} name\n   * @param {string} accessToken\n   * @param {ParticipantSignaling} localParticipant\n   * @param {PeerConnectionManager} peerConnectionManager\n   * @param {string} wsServer\n   * @param {object} [options]\n   */\n\n\n  function TwilioConnectionTransport(name, accessToken, localParticipant, peerConnectionManager, wsServer, options) {\n    _classCallCheck(this, TwilioConnectionTransport);\n\n    options = Object.assign({\n      Backoff: DefaultBackoff,\n      InsightsPublisher: InsightsPublisher,\n      NullInsightsPublisher: NullInsightsPublisher,\n      TwilioConnection: TwilioConnection,\n      iceServers: null,\n      sdpFormat: getSdpFormat(options.sdpSemantics),\n      trackPriority: true,\n      trackSwitchOff: true,\n      userAgent: getUserAgent()\n    }, options);\n\n    var _this = _possibleConstructorReturn(this, (TwilioConnectionTransport.__proto__ || Object.getPrototypeOf(TwilioConnectionTransport)).call(this, 'connecting', states));\n\n    var eventPublisherOptions = {};\n\n    if (options.wsServerInsights) {\n      eventPublisherOptions.gateway = options.wsServerInsights;\n    }\n\n    var EventPublisher = options.insights ? options.InsightsPublisher : options.NullInsightsPublisher;\n    Object.defineProperties(_this, {\n      _accessToken: {\n        value: accessToken\n      },\n      _automaticSubscription: {\n        value: options.automaticSubscription\n      },\n      _bandwidthProfile: {\n        value: options.bandwidthProfile\n      },\n      _dominantSpeaker: {\n        value: options.dominantSpeaker\n      },\n      _eventPublisher: {\n        value: new EventPublisher(accessToken, SDK_NAME, SDK_VERSION, options.environment, options.realm, eventPublisherOptions)\n      },\n      _iceServersStatus: {\n        value: Array.isArray(options.iceServers) ? 'overrode' : 'acquire'\n      },\n      _localParticipant: {\n        value: localParticipant\n      },\n      _name: {\n        value: name\n      },\n      _networkQuality: {\n        value: options.networkQuality\n      },\n      _options: {\n        value: options\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _sessionTimer: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeoutMS: {\n        value: 0,\n        // initially 0, set only after 1st successful connection.\n        writable: true\n      },\n      _reconnectBackoff: {\n        value: options.Backoff.exponential(reconnectBackoffConfig)\n      },\n      _session: {\n        value: null,\n        writable: true\n      },\n      _trackPriority: {\n        value: options.trackPriority\n      },\n      _trackSwitchOff: {\n        value: options.trackSwitchOff\n      },\n      _twilioConnection: {\n        value: null,\n        writable: true\n      },\n      _updatesReceived: {\n        value: []\n      },\n      _updatesToSend: {\n        value: []\n      },\n      _userAgent: {\n        value: options.userAgent\n      },\n      _wsServer: {\n        value: wsServer\n      }\n    });\n    setupTransport(_this);\n\n    _this.once('connected', function (_ref) {\n      var sid = _ref.sid,\n          participant = _ref.participant;\n\n      _this._eventPublisher.connect(sid, participant.sid);\n    });\n\n    return _this;\n  }\n  /**\n   * Create a Connect, Sync or Disconnect RSP message.\n   * @private\n   * @returns {?object}\n   */\n\n\n  _createClass(TwilioConnectionTransport, [{\n    key: '_createConnectOrSyncOrDisconnectMessage',\n    value: function _createConnectOrSyncOrDisconnectMessage() {\n      if (this.state === 'connected') {\n        return null;\n      }\n\n      if (this.state === 'disconnected') {\n        return {\n          session: this._session,\n          type: 'disconnect',\n          version: RSP_VERSION\n        };\n      }\n\n      var type = {\n        connecting: 'connect',\n        syncing: 'sync'\n      }[this.state];\n      var message = {\n        name: this._name,\n        participant: this._localParticipant.getState(),\n        peer_connections: this._peerConnectionManager.getStates(),\n        type: type,\n        version: RSP_VERSION\n      };\n\n      if (message.type === 'connect') {\n        message.ice_servers = this._iceServersStatus;\n        message.publisher = {\n          name: SDK_NAME,\n          sdk_version: SDK_VERSION,\n          user_agent: this._userAgent\n        };\n\n        if (this._bandwidthProfile) {\n          message.bandwidth_profile = createBandwidthProfilePayload(this._bandwidthProfile);\n        }\n\n        message.media_signaling = createMediaSignalingPayload(this._dominantSpeaker, this._networkQuality, this._trackPriority, this._trackSwitchOff);\n        message.subscribe = createSubscribePayload(this._automaticSubscription);\n        var sdpFormat = this._options.sdpFormat;\n\n        if (sdpFormat) {\n          message.format = sdpFormat;\n        }\n\n        message.token = this._accessToken;\n      } else if (message.type === 'sync') {\n        message.session = this._session;\n        message.token = this._accessToken;\n      } else if (message.type === 'update') {\n        message.session = this._session;\n      }\n\n      return message;\n    }\n    /**\n     * Create an \"ice\" message.\n     * @private\n     */\n\n  }, {\n    key: '_createIceMessage',\n    value: function _createIceMessage() {\n      return {\n        edge: 'roaming',\n        // roaming here means use same edge as signaling.\n        token: this._accessToken,\n        type: 'ice',\n        version: ICE_VERSION\n      };\n    }\n    /**\n     * Send a Connect, Sync or Disconnect RSP message.\n     * @private\n     */\n\n  }, {\n    key: '_sendConnectOrSyncOrDisconnectMessage',\n    value: function _sendConnectOrSyncOrDisconnectMessage() {\n      var message = this._createConnectOrSyncOrDisconnectMessage();\n\n      if (message) {\n        this._twilioConnection.sendMessage(message);\n      }\n    }\n    /**\n     * Disconnect the {@link TwilioConnectionTransport}. Returns true if calling the method resulted\n     * in disconnection.\n     * @param {TwilioError} [error]\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect(error) {\n      if (this.state !== 'disconnected') {\n        this.preempt('disconnected', null, [error]);\n\n        this._sendConnectOrSyncOrDisconnectMessage();\n\n        this._twilioConnection.close();\n\n        this._eventPublisher.disconnect();\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Publish an RSP Update. Returns true if calling the method resulted in\n     * publishing (or eventually publishing) the update.\n     * @param {object} update\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'publish',\n    value: function publish(update) {\n      switch (this.state) {\n        case 'connected':\n          this._twilioConnection.sendMessage(Object.assign({\n            session: this._session,\n            type: 'update',\n            version: RSP_VERSION\n          }, update));\n\n          return true;\n\n        case 'connecting':\n        case 'syncing':\n          this._updatesToSend.push(update);\n\n          return true;\n\n        case 'disconnected':\n        default:\n          return false;\n      }\n    }\n    /**\n     * Publish (or queue) an event to the Insights gateway.\n     * @param {string} groupName - Event group name\n     * @param {string} eventName - Event name\n     * @param {object} payload - Event payload\n     * @returns {boolean} true if queued or published, false if disconnected from the Insights gateway\n     */\n\n  }, {\n    key: 'publishEvent',\n    value: function publishEvent(groupName, eventName, payload) {\n      return this._eventPublisher.publish(groupName, eventName, payload);\n    }\n    /**\n     * Sync the {@link TwilioConnectionTransport}. Returns true if calling the method resulted in\n     * syncing.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'sync',\n    value: function sync() {\n      if (this.state === 'connected') {\n        this.preempt('syncing');\n\n        this._sendConnectOrSyncOrDisconnectMessage();\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_setSession',\n    value: function _setSession(session, sessionTimeout) {\n      this._session = session;\n      this._sessionTimeoutMS = sessionTimeout * 1000;\n    }\n    /**\n     * Determines if we should attempt reconnect.\n     * returns a Promise to wait on before attempting to\n     * reconnect. returns null if its not okay to reconnect.\n     * @private\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_getReconnectTimer',\n    value: function _getReconnectTimer() {\n      var _this2 = this;\n\n      if (this._sessionTimeoutMS === 0) {\n        // this means either we have never connected.\n        // or we timed out while trying to reconnect\n        // In either case we do not want to reconnect.\n        return null;\n      } // start session timer\n\n\n      if (!this._sessionTimer) {\n        this._sessionTimer = new Timeout(function () {\n          // ensure that _clearReconnectTimer wasn't\n          // called while we were waiting.\n          if (_this2._sessionTimer) {\n            // do not allow any more reconnect attempts.\n            _this2._sessionTimeoutMS = 0;\n          }\n        }, this._sessionTimeoutMS);\n      } // return promise that waits with exponential backoff.\n\n\n      return new Promise(function (resolve) {\n        _this2._reconnectBackoff.once('ready', resolve);\n\n        _this2._reconnectBackoff.backoff();\n      });\n    }\n    /**\n     * clears the session reconnect timer.\n     *\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_clearReconnectTimer',\n    value: function _clearReconnectTimer() {\n      this._reconnectBackoff.reset();\n\n      if (this._sessionTimer) {\n        this._sessionTimer.clear();\n\n        this._sessionTimer = null;\n      }\n    }\n  }]);\n\n  return TwilioConnectionTransport;\n}(StateMachine);\n/**\n * @event TwilioConnectionTransport#connected\n * @param {object} initialState\n */\n\n/**\n * @event TwilioConnectionTransport#message\n * @param {object} peerConnections\n */\n\n\nfunction reducePeerConnections(peerConnections) {\n  return Array.from(peerConnections.reduce(function (peerConnectionsById, update) {\n    var reduced = peerConnectionsById.get(update.id) || update; // First, reduce the top-level `description` property.\n\n    if (!reduced.description && update.description) {\n      reduced.description = update.description;\n    } else if (reduced.description && update.description) {\n      if (update.description.revision > reduced.description.revision) {\n        reduced.description = update.description;\n      }\n    } // Then, reduce the top-level `ice` property.\n\n\n    if (!reduced.ice && update.ice) {\n      reduced.ice = update.ice;\n    } else if (reduced.ice && update.ice) {\n      if (update.ice.revision > reduced.ice.revision) {\n        reduced.ice = update.ice;\n      }\n    } // Finally, update the map.\n\n\n    peerConnectionsById.set(reduced.id, reduced);\n    return peerConnectionsById;\n  }, new Map()).values());\n}\n\nfunction reduceUpdates(updates) {\n  return updates.reduce(function (reduced, update) {\n    // First, reduce the top-level `participant` property.\n    if (!reduced.participant && update.participant) {\n      reduced.participant = update.participant;\n    } else if (reduced.participant && update.participant) {\n      if (update.participant.revision > reduced.participant.revision) {\n        reduced.participant = update.participant;\n      }\n    } // Then, reduce the top-level `peer_connections` property.\n\n    /* eslint camelcase:0 */\n\n\n    if (!reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(update.peer_connections);\n    } else if (reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(reduced.peer_connections.concat(update.peer_connections));\n    }\n\n    return reduced;\n  }, {});\n}\n\nfunction setupTransport(transport) {\n  function createOrResetTwilioConnection() {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n\n    if (transport._twilioConnection) {\n      transport._twilioConnection.removeListener('message', handleMessage);\n    }\n\n    var _iceServersStatus = transport._iceServersStatus,\n        _options = transport._options,\n        _wsServer = transport._wsServer,\n        state = transport.state;\n    var TwilioConnection = _options.TwilioConnection;\n    var twilioConnection = new TwilioConnection(_wsServer, Object.assign({\n      helloBody: state === 'connecting' && _iceServersStatus === 'acquire' ? transport._createIceMessage() : transport._createConnectOrSyncOrDisconnectMessage()\n    }, _options));\n    twilioConnection.once('close', function (reason) {\n      if (reason === TwilioConnection.CloseReason.LOCAL) {\n        disconnect();\n      } else {\n        disconnect(new Error(reason));\n      }\n    });\n    twilioConnection.on('message', handleMessage);\n    transport._twilioConnection = twilioConnection;\n  }\n\n  function disconnect(error) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n\n    if (!error) {\n      transport.disconnect();\n      return;\n    }\n\n    var reconnectTimer = transport._getReconnectTimer();\n\n    if (!reconnectTimer) {\n      var twilioError = error.message === TwilioConnection.CloseReason.BUSY ? new SignalingServerBusyError() : new SignalingConnectionError();\n      transport.disconnect(twilioError);\n      return;\n    }\n\n    if (transport.state === 'connected') {\n      transport.preempt('syncing');\n    }\n\n    reconnectTimer.then(createOrResetTwilioConnection);\n  }\n\n  function handleMessage(message) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n\n    if (message.type === 'error') {\n      transport.disconnect(createTwilioError(message.code, message.message));\n      return;\n    }\n\n    switch (transport.state) {\n      case 'connected':\n        switch (message.type) {\n          case 'connected':\n          case 'synced':\n          case 'update':\n            transport.emit('message', message);\n            return;\n\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n\n          default:\n            // Do nothing.\n            return;\n        }\n\n      case 'connecting':\n        switch (message.type) {\n          case 'iced':\n            transport._options.onIced(message.ice_servers).then(function () {\n              transport._sendConnectOrSyncOrDisconnectMessage();\n            });\n\n            return;\n\n          case 'connected':\n            transport._setSession(message.session, message.options.session_timeout);\n\n            transport.emit('connected', message);\n            transport.preempt('connected');\n            return;\n\n          case 'synced':\n          case 'update':\n            transport._updatesReceived.push(message);\n\n            return;\n\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n\n          default:\n            // Do nothing.\n            return;\n        }\n\n      case 'syncing':\n        switch (message.type) {\n          case 'connected':\n          case 'update':\n            transport._updatesReceived.push(message);\n\n            return;\n\n          case 'synced':\n            transport._clearReconnectTimer();\n\n            transport.emit('message', message);\n            transport.preempt('connected');\n            return;\n\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n\n          default:\n            // Do nothing.\n            return;\n        }\n\n      default:\n        // Impossible\n        return;\n    }\n  }\n\n  transport.on('stateChanged', function stateChanged(state) {\n    switch (state) {\n      case 'connected':\n        {\n          var updates = transport._updatesToSend.splice(0);\n\n          if (updates.length) {\n            transport.publish(reduceUpdates(updates));\n          }\n\n          transport._updatesReceived.splice(0).forEach(function (update) {\n            return transport.emit('message', update);\n          });\n\n          return;\n        }\n\n      case 'disconnected':\n        transport._twilioConnection.removeListener('message', handleMessage);\n\n        transport.removeListener('stateChanged', stateChanged);\n        return;\n\n      case 'syncing':\n        // Do nothing.\n        return;\n\n      default:\n        // Impossible\n        return;\n    }\n  });\n  var _options = transport._options,\n      _iceServersStatus = transport._iceServersStatus;\n  var iceServers = _options.iceServers,\n      onIced = _options.onIced;\n\n  if (_iceServersStatus === 'overrode') {\n    onIced(iceServers).then(createOrResetTwilioConnection);\n  } else {\n    createOrResetTwilioConnection();\n  }\n}\n\nmodule.exports = TwilioConnectionTransport;","map":{"version":3,"sources":["/Users/xicheng/lab/git/fv_nav/node_modules/twilio-video/es5/signaling/v2/twilioconnectiontransport.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","_require","require","getSdpFormat","packageInfo","InsightsPublisher","NullInsightsPublisher","StateMachine","TwilioConnection","DefaultBackoff","_require2","reconnectBackoffConfig","Timeout","_require3","createBandwidthProfilePayload","createMediaSignalingPayload","createSubscribePayload","getUserAgent","_require4","createTwilioError","RoomCompletedError","SignalingConnectionError","SignalingServerBusyError","ICE_VERSION","RSP_VERSION","SDK_NAME","name","SDK_VERSION","version","states","connecting","connected","syncing","disconnected","TwilioConnectionTransport","_StateMachine","accessToken","localParticipant","peerConnectionManager","wsServer","options","assign","Backoff","iceServers","sdpFormat","sdpSemantics","trackPriority","trackSwitchOff","userAgent","_this","getPrototypeOf","eventPublisherOptions","wsServerInsights","gateway","EventPublisher","insights","_accessToken","_automaticSubscription","automaticSubscription","_bandwidthProfile","bandwidthProfile","_dominantSpeaker","dominantSpeaker","_eventPublisher","environment","realm","_iceServersStatus","Array","isArray","_localParticipant","_name","_networkQuality","networkQuality","_options","_peerConnectionManager","_sessionTimer","_sessionTimeoutMS","_reconnectBackoff","exponential","_session","_trackPriority","_trackSwitchOff","_twilioConnection","_updatesReceived","_updatesToSend","_userAgent","_wsServer","setupTransport","once","_ref","sid","participant","connect","_createConnectOrSyncOrDisconnectMessage","state","session","type","message","getState","peer_connections","getStates","ice_servers","publisher","sdk_version","user_agent","bandwidth_profile","media_signaling","subscribe","format","token","_createIceMessage","edge","_sendConnectOrSyncOrDisconnectMessage","sendMessage","disconnect","error","preempt","close","publish","update","push","publishEvent","groupName","eventName","payload","sync","_setSession","sessionTimeout","_getReconnectTimer","_this2","Promise","resolve","backoff","_clearReconnectTimer","reset","clear","reducePeerConnections","peerConnections","from","reduce","peerConnectionsById","reduced","get","id","description","revision","ice","set","Map","values","reduceUpdates","updates","concat","transport","createOrResetTwilioConnection","removeListener","handleMessage","twilioConnection","helloBody","reason","CloseReason","LOCAL","Error","on","reconnectTimer","twilioError","BUSY","then","code","emit","status","onIced","session_timeout","stateChanged","splice","forEach","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = require('@twilio/webrtc/lib/util/sdp'),\n    getSdpFormat = _require.getSdpFormat;\n\nvar packageInfo = require('../../../package.json');\nvar InsightsPublisher = require('../../util/insightspublisher');\nvar NullInsightsPublisher = require('../../util/insightspublisher/null');\nvar StateMachine = require('../../statemachine');\nvar TwilioConnection = require('../../twilioconnection');\nvar DefaultBackoff = require('backoff');\n\nvar _require2 = require('../../util/constants'),\n    reconnectBackoffConfig = _require2.reconnectBackoffConfig;\n\nvar Timeout = require('../../util/timeout');\n\nvar _require3 = require('../../util'),\n    createBandwidthProfilePayload = _require3.createBandwidthProfilePayload,\n    createMediaSignalingPayload = _require3.createMediaSignalingPayload,\n    createSubscribePayload = _require3.createSubscribePayload,\n    getUserAgent = _require3.getUserAgent;\n\nvar _require4 = require('../../util/twilio-video-errors'),\n    createTwilioError = _require4.createTwilioError,\n    RoomCompletedError = _require4.RoomCompletedError,\n    SignalingConnectionError = _require4.SignalingConnectionError,\n    SignalingServerBusyError = _require4.SignalingServerBusyError;\n\nvar ICE_VERSION = 1;\nvar RSP_VERSION = 2;\nvar SDK_NAME = packageInfo.name + '.js';\nvar SDK_VERSION = packageInfo.version;\n\n/*\nTwilioConnectionTransport States\n----------------\n\n                      +-----------+\n                      |           |\n                      |  syncing  |---------+\n                      |           |         |\n                      +-----------+         |\n                         ^     |            |\n                         |     |            |\n                         |     v            v\n    +------------+    +-----------+    +--------------+\n    |            |    |           |    |              |\n    | connecting |--->| connected |--->| disconnected |\n    |            |    |           |    |              |\n    +------------+    +-----------+    +--------------+\n             |                              ^\n             |                              |\n             |                              |\n             +------------------------------+\n\n*/\n\nvar states = {\n  connecting: ['connected', 'disconnected'],\n  connected: ['disconnected', 'syncing'],\n  syncing: ['connected', 'disconnected'],\n  disconnected: []\n};\n\n/**\n * A {@link TwilioConnectionTransport} supports sending and receiving Room Signaling Protocol\n * (RSP) messages. It also supports RSP requests, such as Sync and Disconnect.\n * @extends StateMachine\n * @emits TwilioConnectionTransport#connected\n * @emits TwilioConnectionTransport#message\n */\n\nvar TwilioConnectionTransport = function (_StateMachine) {\n  _inherits(TwilioConnectionTransport, _StateMachine);\n\n  /**\n   * Construct a {@link TwilioConnectionTransport}.\n   * @param {?string} name\n   * @param {string} accessToken\n   * @param {ParticipantSignaling} localParticipant\n   * @param {PeerConnectionManager} peerConnectionManager\n   * @param {string} wsServer\n   * @param {object} [options]\n   */\n  function TwilioConnectionTransport(name, accessToken, localParticipant, peerConnectionManager, wsServer, options) {\n    _classCallCheck(this, TwilioConnectionTransport);\n\n    options = Object.assign({\n      Backoff: DefaultBackoff,\n      InsightsPublisher: InsightsPublisher,\n      NullInsightsPublisher: NullInsightsPublisher,\n      TwilioConnection: TwilioConnection,\n      iceServers: null,\n      sdpFormat: getSdpFormat(options.sdpSemantics),\n      trackPriority: true,\n      trackSwitchOff: true,\n      userAgent: getUserAgent()\n    }, options);\n\n    var _this = _possibleConstructorReturn(this, (TwilioConnectionTransport.__proto__ || Object.getPrototypeOf(TwilioConnectionTransport)).call(this, 'connecting', states));\n\n    var eventPublisherOptions = {};\n    if (options.wsServerInsights) {\n      eventPublisherOptions.gateway = options.wsServerInsights;\n    }\n\n    var EventPublisher = options.insights ? options.InsightsPublisher : options.NullInsightsPublisher;\n    Object.defineProperties(_this, {\n      _accessToken: {\n        value: accessToken\n      },\n      _automaticSubscription: {\n        value: options.automaticSubscription\n      },\n      _bandwidthProfile: {\n        value: options.bandwidthProfile\n      },\n      _dominantSpeaker: {\n        value: options.dominantSpeaker\n      },\n      _eventPublisher: {\n        value: new EventPublisher(accessToken, SDK_NAME, SDK_VERSION, options.environment, options.realm, eventPublisherOptions)\n      },\n      _iceServersStatus: {\n        value: Array.isArray(options.iceServers) ? 'overrode' : 'acquire'\n      },\n      _localParticipant: {\n        value: localParticipant\n      },\n      _name: {\n        value: name\n      },\n      _networkQuality: {\n        value: options.networkQuality\n      },\n      _options: {\n        value: options\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _sessionTimer: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeoutMS: {\n        value: 0, // initially 0, set only after 1st successful connection.\n        writable: true\n      },\n      _reconnectBackoff: {\n        value: options.Backoff.exponential(reconnectBackoffConfig)\n      },\n      _session: {\n        value: null,\n        writable: true\n      },\n      _trackPriority: {\n        value: options.trackPriority\n      },\n      _trackSwitchOff: {\n        value: options.trackSwitchOff\n      },\n      _twilioConnection: {\n        value: null,\n        writable: true\n      },\n      _updatesReceived: {\n        value: []\n      },\n      _updatesToSend: {\n        value: []\n      },\n      _userAgent: {\n        value: options.userAgent\n      },\n      _wsServer: {\n        value: wsServer\n      }\n    });\n    setupTransport(_this);\n\n    _this.once('connected', function (_ref) {\n      var sid = _ref.sid,\n          participant = _ref.participant;\n\n      _this._eventPublisher.connect(sid, participant.sid);\n    });\n    return _this;\n  }\n\n  /**\n   * Create a Connect, Sync or Disconnect RSP message.\n   * @private\n   * @returns {?object}\n   */\n\n\n  _createClass(TwilioConnectionTransport, [{\n    key: '_createConnectOrSyncOrDisconnectMessage',\n    value: function _createConnectOrSyncOrDisconnectMessage() {\n      if (this.state === 'connected') {\n        return null;\n      }\n\n      if (this.state === 'disconnected') {\n        return {\n          session: this._session,\n          type: 'disconnect',\n          version: RSP_VERSION\n        };\n      }\n\n      var type = {\n        connecting: 'connect',\n        syncing: 'sync'\n      }[this.state];\n\n      var message = {\n        name: this._name,\n        participant: this._localParticipant.getState(),\n        peer_connections: this._peerConnectionManager.getStates(),\n        type: type,\n        version: RSP_VERSION\n      };\n\n      if (message.type === 'connect') {\n        message.ice_servers = this._iceServersStatus;\n\n        message.publisher = {\n          name: SDK_NAME,\n          sdk_version: SDK_VERSION,\n          user_agent: this._userAgent\n        };\n\n        if (this._bandwidthProfile) {\n          message.bandwidth_profile = createBandwidthProfilePayload(this._bandwidthProfile);\n        }\n\n        message.media_signaling = createMediaSignalingPayload(this._dominantSpeaker, this._networkQuality, this._trackPriority, this._trackSwitchOff);\n\n        message.subscribe = createSubscribePayload(this._automaticSubscription);\n\n        var sdpFormat = this._options.sdpFormat;\n        if (sdpFormat) {\n          message.format = sdpFormat;\n        }\n        message.token = this._accessToken;\n      } else if (message.type === 'sync') {\n        message.session = this._session;\n        message.token = this._accessToken;\n      } else if (message.type === 'update') {\n        message.session = this._session;\n      }\n\n      return message;\n    }\n\n    /**\n     * Create an \"ice\" message.\n     * @private\n     */\n\n  }, {\n    key: '_createIceMessage',\n    value: function _createIceMessage() {\n      return {\n        edge: 'roaming', // roaming here means use same edge as signaling.\n        token: this._accessToken,\n        type: 'ice',\n        version: ICE_VERSION\n      };\n    }\n\n    /**\n     * Send a Connect, Sync or Disconnect RSP message.\n     * @private\n     */\n\n  }, {\n    key: '_sendConnectOrSyncOrDisconnectMessage',\n    value: function _sendConnectOrSyncOrDisconnectMessage() {\n      var message = this._createConnectOrSyncOrDisconnectMessage();\n      if (message) {\n        this._twilioConnection.sendMessage(message);\n      }\n    }\n\n    /**\n     * Disconnect the {@link TwilioConnectionTransport}. Returns true if calling the method resulted\n     * in disconnection.\n     * @param {TwilioError} [error]\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect(error) {\n      if (this.state !== 'disconnected') {\n        this.preempt('disconnected', null, [error]);\n        this._sendConnectOrSyncOrDisconnectMessage();\n        this._twilioConnection.close();\n        this._eventPublisher.disconnect();\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Publish an RSP Update. Returns true if calling the method resulted in\n     * publishing (or eventually publishing) the update.\n     * @param {object} update\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'publish',\n    value: function publish(update) {\n      switch (this.state) {\n        case 'connected':\n          this._twilioConnection.sendMessage(Object.assign({\n            session: this._session,\n            type: 'update',\n            version: RSP_VERSION\n          }, update));\n          return true;\n        case 'connecting':\n        case 'syncing':\n          this._updatesToSend.push(update);\n          return true;\n        case 'disconnected':\n        default:\n          return false;\n      }\n    }\n\n    /**\n     * Publish (or queue) an event to the Insights gateway.\n     * @param {string} groupName - Event group name\n     * @param {string} eventName - Event name\n     * @param {object} payload - Event payload\n     * @returns {boolean} true if queued or published, false if disconnected from the Insights gateway\n     */\n\n  }, {\n    key: 'publishEvent',\n    value: function publishEvent(groupName, eventName, payload) {\n      return this._eventPublisher.publish(groupName, eventName, payload);\n    }\n\n    /**\n     * Sync the {@link TwilioConnectionTransport}. Returns true if calling the method resulted in\n     * syncing.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'sync',\n    value: function sync() {\n      if (this.state === 'connected') {\n        this.preempt('syncing');\n        this._sendConnectOrSyncOrDisconnectMessage();\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_setSession',\n    value: function _setSession(session, sessionTimeout) {\n      this._session = session;\n      this._sessionTimeoutMS = sessionTimeout * 1000;\n    }\n\n    /**\n     * Determines if we should attempt reconnect.\n     * returns a Promise to wait on before attempting to\n     * reconnect. returns null if its not okay to reconnect.\n     * @private\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_getReconnectTimer',\n    value: function _getReconnectTimer() {\n      var _this2 = this;\n\n      if (this._sessionTimeoutMS === 0) {\n        // this means either we have never connected.\n        // or we timed out while trying to reconnect\n        // In either case we do not want to reconnect.\n        return null;\n      }\n\n      // start session timer\n      if (!this._sessionTimer) {\n        this._sessionTimer = new Timeout(function () {\n          // ensure that _clearReconnectTimer wasn't\n          // called while we were waiting.\n          if (_this2._sessionTimer) {\n            // do not allow any more reconnect attempts.\n            _this2._sessionTimeoutMS = 0;\n          }\n        }, this._sessionTimeoutMS);\n      }\n\n      // return promise that waits with exponential backoff.\n      return new Promise(function (resolve) {\n        _this2._reconnectBackoff.once('ready', resolve);\n        _this2._reconnectBackoff.backoff();\n      });\n    }\n\n    /**\n     * clears the session reconnect timer.\n     *\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_clearReconnectTimer',\n    value: function _clearReconnectTimer() {\n      this._reconnectBackoff.reset();\n      if (this._sessionTimer) {\n        this._sessionTimer.clear();\n        this._sessionTimer = null;\n      }\n    }\n  }]);\n\n  return TwilioConnectionTransport;\n}(StateMachine);\n\n/**\n * @event TwilioConnectionTransport#connected\n * @param {object} initialState\n */\n\n/**\n * @event TwilioConnectionTransport#message\n * @param {object} peerConnections\n */\n\nfunction reducePeerConnections(peerConnections) {\n  return Array.from(peerConnections.reduce(function (peerConnectionsById, update) {\n    var reduced = peerConnectionsById.get(update.id) || update;\n\n    // First, reduce the top-level `description` property.\n    if (!reduced.description && update.description) {\n      reduced.description = update.description;\n    } else if (reduced.description && update.description) {\n      if (update.description.revision > reduced.description.revision) {\n        reduced.description = update.description;\n      }\n    }\n\n    // Then, reduce the top-level `ice` property.\n    if (!reduced.ice && update.ice) {\n      reduced.ice = update.ice;\n    } else if (reduced.ice && update.ice) {\n      if (update.ice.revision > reduced.ice.revision) {\n        reduced.ice = update.ice;\n      }\n    }\n\n    // Finally, update the map.\n    peerConnectionsById.set(reduced.id, reduced);\n    return peerConnectionsById;\n  }, new Map()).values());\n}\n\nfunction reduceUpdates(updates) {\n  return updates.reduce(function (reduced, update) {\n    // First, reduce the top-level `participant` property.\n    if (!reduced.participant && update.participant) {\n      reduced.participant = update.participant;\n    } else if (reduced.participant && update.participant) {\n      if (update.participant.revision > reduced.participant.revision) {\n        reduced.participant = update.participant;\n      }\n    }\n\n    // Then, reduce the top-level `peer_connections` property.\n    /* eslint camelcase:0 */\n    if (!reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(update.peer_connections);\n    } else if (reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(reduced.peer_connections.concat(update.peer_connections));\n    }\n    return reduced;\n  }, {});\n}\n\nfunction setupTransport(transport) {\n  function createOrResetTwilioConnection() {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (transport._twilioConnection) {\n      transport._twilioConnection.removeListener('message', handleMessage);\n    }\n    var _iceServersStatus = transport._iceServersStatus,\n        _options = transport._options,\n        _wsServer = transport._wsServer,\n        state = transport.state;\n    var TwilioConnection = _options.TwilioConnection;\n\n\n    var twilioConnection = new TwilioConnection(_wsServer, Object.assign({\n      helloBody: state === 'connecting' && _iceServersStatus === 'acquire' ? transport._createIceMessage() : transport._createConnectOrSyncOrDisconnectMessage()\n    }, _options));\n\n    twilioConnection.once('close', function (reason) {\n      if (reason === TwilioConnection.CloseReason.LOCAL) {\n        disconnect();\n      } else {\n        disconnect(new Error(reason));\n      }\n    });\n\n    twilioConnection.on('message', handleMessage);\n    transport._twilioConnection = twilioConnection;\n  }\n\n  function disconnect(error) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (!error) {\n      transport.disconnect();\n      return;\n    }\n\n    var reconnectTimer = transport._getReconnectTimer();\n    if (!reconnectTimer) {\n      var twilioError = error.message === TwilioConnection.CloseReason.BUSY ? new SignalingServerBusyError() : new SignalingConnectionError();\n      transport.disconnect(twilioError);\n      return;\n    }\n\n    if (transport.state === 'connected') {\n      transport.preempt('syncing');\n    }\n\n    reconnectTimer.then(createOrResetTwilioConnection);\n  }\n\n  function handleMessage(message) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (message.type === 'error') {\n      transport.disconnect(createTwilioError(message.code, message.message));\n      return;\n    }\n    switch (transport.state) {\n      case 'connected':\n        switch (message.type) {\n          case 'connected':\n          case 'synced':\n          case 'update':\n            transport.emit('message', message);\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      case 'connecting':\n        switch (message.type) {\n          case 'iced':\n            transport._options.onIced(message.ice_servers).then(function () {\n              transport._sendConnectOrSyncOrDisconnectMessage();\n            });\n            return;\n          case 'connected':\n            transport._setSession(message.session, message.options.session_timeout);\n            transport.emit('connected', message);\n            transport.preempt('connected');\n            return;\n          case 'synced':\n          case 'update':\n            transport._updatesReceived.push(message);\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      case 'syncing':\n        switch (message.type) {\n          case 'connected':\n          case 'update':\n            transport._updatesReceived.push(message);\n            return;\n          case 'synced':\n            transport._clearReconnectTimer();\n            transport.emit('message', message);\n            transport.preempt('connected');\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      default:\n        // Impossible\n        return;\n    }\n  }\n\n  transport.on('stateChanged', function stateChanged(state) {\n    switch (state) {\n      case 'connected':\n        {\n          var updates = transport._updatesToSend.splice(0);\n          if (updates.length) {\n            transport.publish(reduceUpdates(updates));\n          }\n          transport._updatesReceived.splice(0).forEach(function (update) {\n            return transport.emit('message', update);\n          });\n          return;\n        }\n      case 'disconnected':\n        transport._twilioConnection.removeListener('message', handleMessage);\n        transport.removeListener('stateChanged', stateChanged);\n        return;\n      case 'syncing':\n        // Do nothing.\n        return;\n      default:\n        // Impossible\n        return;\n    }\n  });\n\n  var _options = transport._options,\n      _iceServersStatus = transport._iceServersStatus;\n  var iceServers = _options.iceServers,\n      onIced = _options.onIced;\n\n\n  if (_iceServersStatus === 'overrode') {\n    onIced(iceServers).then(createOrResetTwilioConnection);\n  } else {\n    createOrResetTwilioConnection();\n  }\n}\n\nmodule.exports = TwilioConnectionTransport;"]},"metadata":{},"sourceType":"script"}